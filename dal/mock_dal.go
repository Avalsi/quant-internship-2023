// Code generated by mockery v2.38.0. DO NOT EDIT.

package dal

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockDAL is an autogenerated mock type for the DAL type
type MockDAL struct {
	mock.Mock
}

// Aggregate provides a mock function with given fields: ctx, collection, pipeline, result
func (_m *MockDAL) Aggregate(ctx context.Context, collection string, pipeline []interface{}, result interface{}) error {
	ret := _m.Called(ctx, collection, pipeline, result)

	if len(ret) == 0 {
		panic("no return value specified for Aggregate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []interface{}, interface{}) error); ok {
		r0 = rf(ctx, collection, pipeline, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, collection, filter
func (_m *MockDAL) Delete(ctx context.Context, collection string, filter interface{}) (*DeleteResult, error) {
	ret := _m.Called(ctx, collection, filter)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *DeleteResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) (*DeleteResult, error)); ok {
		return rf(ctx, collection, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *DeleteResult); ok {
		r0 = rf(ctx, collection, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, collection, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Disconnect provides a mock function with given fields: ctx
func (_m *MockDAL) Disconnect(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, collection, findArguments, result
func (_m *MockDAL) Find(ctx context.Context, collection string, findArguments FindArguments, result interface{}) error {
	ret := _m.Called(ctx, collection, findArguments, result)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, FindArguments, interface{}) error); ok {
		r0 = rf(ctx, collection, findArguments, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAndDeleteByID provides a mock function with given fields: ctx, collection, id, document
func (_m *MockDAL) FindAndDeleteByID(ctx context.Context, collection string, id string, document interface{}) error {
	ret := _m.Called(ctx, collection, id, document)

	if len(ret) == 0 {
		panic("no return value specified for FindAndDeleteByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) error); ok {
		r0 = rf(ctx, collection, id, document)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, collection, id, result
func (_m *MockDAL) FindByID(ctx context.Context, collection string, id string, result interface{}) error {
	ret := _m.Called(ctx, collection, id, result)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) error); ok {
		r0 = rf(ctx, collection, id, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: ctx, collection, document
func (_m *MockDAL) Insert(ctx context.Context, collection string, document []interface{}) (*InsertResult, error) {
	ret := _m.Called(ctx, collection, document)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 *InsertResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []interface{}) (*InsertResult, error)); ok {
		return rf(ctx, collection, document)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []interface{}) *InsertResult); ok {
		r0 = rf(ctx, collection, document)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*InsertResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []interface{}) error); ok {
		r1 = rf(ctx, collection, document)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, collection, filter, update, optionFuncs
func (_m *MockDAL) Update(ctx context.Context, collection string, filter interface{}, update interface{}, optionFuncs ...UpdateOptionsFunc) (*UpdateResult, error) {
	_va := make([]interface{}, len(optionFuncs))
	for _i := range optionFuncs {
		_va[_i] = optionFuncs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, collection, filter, update)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}, ...UpdateOptionsFunc) (*UpdateResult, error)); ok {
		return rf(ctx, collection, filter, update, optionFuncs...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}, ...UpdateOptionsFunc) *UpdateResult); ok {
		r0 = rf(ctx, collection, filter, update, optionFuncs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, interface{}, ...UpdateOptionsFunc) error); ok {
		r1 = rf(ctx, collection, filter, update, optionFuncs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByID provides a mock function with given fields: ctx, collection, id, update, optionFuncs
func (_m *MockDAL) UpdateByID(ctx context.Context, collection string, id string, update interface{}, optionFuncs ...UpdateOptionsFunc) (*UpdateResult, error) {
	_va := make([]interface{}, len(optionFuncs))
	for _i := range optionFuncs {
		_va[_i] = optionFuncs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, collection, id, update)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByID")
	}

	var r0 *UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, ...UpdateOptionsFunc) (*UpdateResult, error)); ok {
		return rf(ctx, collection, id, update, optionFuncs...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, ...UpdateOptionsFunc) *UpdateResult); ok {
		r0 = rf(ctx, collection, id, update, optionFuncs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, interface{}, ...UpdateOptionsFunc) error); ok {
		r1 = rf(ctx, collection, id, update, optionFuncs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockDAL creates a new instance of MockDAL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDAL(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDAL {
	mock := &MockDAL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
